TUESDAY ASSIGNMENT

1)Find the product no color is blue,no price is 899:
db.products1.find({$nor: [{color: "blue"},{price: 899}]})

2)Find products that do not have "white" as a color and are priced below 800:
db.products1.find({color: { $nin: ["white"] },price: { $lt: 800 }})

3)Find the product cpu is not  less than 3 ,not isodate is ("2011-09-01"):
db.products1.find({$and: [{'spec.cpu': {$not: { $lt: 3 } } },{ releaseDate: {$not: {$eq: ISODate("2011-09-01") }}}]})

4)print the name , screen size and color of products whose color has no gold in it:
db.products1.find({ color: { $nin: ["gold"] } }, { name: 1, "spec.screen": 1, color: 1 })

5)print the names of products whose screen is either greater than 7 or color is white:
db.products1.find({$or: [{ "spec.screen": { $gt: 7 } },{ color: "white" }]}, { name: 1 })

6)print the name and date of product whose ram is neither 4 nor the product price is:
db.products1.find({$and: [{ "spec.ram": { $ne: 4 } },{ price: { $gte: 799 } }]}, { name: 1, releaseDate: 1 })

7)Find products that have either "white" or "black" as a color option and are priced below 800:
db.product1.find({$or: [{ color: "white" },{ color: "black" }],price: { $lt: 800 }})

8)Find products that do not have "gold" as a color and are priced below 700 or have a storage option of 512GB:
db.products1.find({$and: [{ color: { $nin: ["gold"] } },{ $or: [{ price: { $lt: 700 } },{ storage: { $in: [512] } }] }]})

9)Find products that have both a RAM size greater than 8GB and a CPU speed less than 2 GHz, or do not have a storage option of 256GB:
db.products.find({$or: [{ $and: [{ "spec.ram": { $gt: 8 } },{ "spec.cpu": { $lt: 2 } }] },{ storage: { $nin: [256] } }]})

10)find name,price,storage if price is 699 or storage is 1024:
db.products1.find({$or: [{price: 699},{storage: 1024}]},{name: 1,price: 1,storage: 1 })

11)select products with either blue colour and storage not less than 128:
db.products1.find({color: "blue","storage": { $gte: 128 }})

12)Price should be grater than either 799 or ram is greater than 12:
db.products1.find({$or: [{ price: { $gt: 799 } },{ "spec.ram": { $gt: 12 } }]})

SATURDAY ASSIGNMENT
1)
import java.util.ArrayList;
import org.bson.Document;
import com.mongodb.BasicDBObject;
import com.mongodb.client.*;
import com.mongodb.client.model.Filters;

public class practice1 {
    public static void main(String[] args) {
        MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
        MongoDatabase database = mongoClient.getDatabase("week2a");
        MongoCollection<Document> collection = database.getCollection("week2a");
        collection.drop();
        Document doc1 = new Document("First_Name", "Vignesh")
            .append("Last_Name", "Kumar")
            .append("Mark", 43)
            .append("age", 20);
        Document doc2 = new Document("First_Name", "Jayanth")
            .append("Last_Name", "Yuva")
            .append("Mark", 99)
            .append("age", 27);
        Document doc3 = new Document("First_Name", "Code")
            .append("Last_Name", "Red")
            .append("Mark", 65)
            .append("age", 22);
        Document doc4 = new Document("First_Name", "Anuj")
            .append("Last_Name", "Prasad")
            .append("Mark", 78)
            .append("age", 23);
        ArrayList<Document> document = new ArrayList<Document>();
        document.add(doc1);
        document.add(doc2);
        document.add(doc3);
        document.add(doc4);
        collection.insertMany(document);
        Document highestMark = collection.find().sort(new BasicDBObject("Mark", -1)).first();
        if (highestMark != null) {
            int Mark = highestMark.getInteger("Mark");
            FindIterable<Document> highestMarkStudents = collection.find(Filters.eq("Mark", Mark));
            System.out.println("Students with the highest mark:");
            for (Document doc : highestMarkStudents) {
                System.out.println(doc);
            }
        } else {
            System.out.println("No students found");
        }
    }
}


2)
import java.util.ArrayList;
import org.bson.Document;
import com.mongodb.BasicDBObject;
import com.mongodb.client.*;

public class practise2 {
    public static void main(String[] args) {
        MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
        MongoDatabase database = mongoClient.getDatabase("Saturday");
        MongoCollection<Document> collection = database.getCollection("week2b");
        collection.drop(); // Drop the collection if it exists to start fresh

        Document doc1 = new Document("First_Name", "Vignesh")
            .append("Last_Name", "Kumar")
            .append("salary", 16350)
            .append("age", 25);
        Document doc2 = new Document("First_Name", "Jayanth")
            .append("Last_Name", "Yuva")
            .append("salary", 50000)
            .append("age", 27);
        Document doc3 = new Document("First_Name", "Code")
            .append("Last_Name", "Red")
            .append("salary", 23000)
            .append("age", 30);
        Document doc4 = new Document("First_Name", "Anuj")
            .append("Last_Name", "Prasad")
            .append("salary", 24500)
            .append("age", 25);
        Document doc5 = new Document("First_Name", "Cap")
                .append("Last_Name", "Boom")
                .append("salary", 45000)
                .append("age", 39);
        Document doc6 = new Document("First_Name", "Kamal")
                .append("Last_Name", "Hassan")
                .append("salary", 28000)
                .append("age", 28);
        ArrayList<Document> document = new ArrayList<>();
        document.add(doc1);
        document.add(doc2);
        document.add(doc3);
        document.add(doc4);
        document.add(doc5);
        document.add(doc6);
        collection.insertMany(document);
        FindIterable<Document> sortedsalary = collection.find().sort(new BasicDBObject("salary", 1));
        Document lowestSalary = null;
        for (Document doc : sortedsalary) {
            int age = doc.getInteger("age");
            if (age >= 30 && age <= 40) {
                lowestSalary = doc;
                break;
            }
        }
        if (lowestSalary != null) {
            System.out.println("Employee with the lowest salary in the age range 30 to 40:");
            System.out.println(lowestSalary.toJson());
        } else {
            System.out.println("No employees found");
        }
    }
}
